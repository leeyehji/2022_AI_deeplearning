# TensorFlow에 있는 고수준 API인 tf.keras 사용할 예정
import tensorflow as tf

# Helper libraries
import numpy as np
import matplotlib.pyplot as plt

#2.10.0
print("TensorFlow version:",tf.__version__)

#해상도가 낮은(28*28) 흑백 이미지 70,000개. 각 패션이미지는 10개의 범주로 분류 가능
#고전 데이터 set인 MNIST사용. 6만개는 훈련용, 만개는 평가용으로 사용 할 것.

#Fashion MNIST 데이터 로드
fashion_mnist = tf.keras.datasets.fashion_mnist
#load_data() 호출 시 4개의 Numpy 배열이 나옴. 훈련용 배열 2개, 평가용 배열 2개
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

#0: T-shirt&top   1:Trouser   2:Pullover   3:Dress   4:Coat   5:Sandal   6:Shirt
#7: Sneaker       8:Bag       9:Ankle boot

#데이터 셋에 클래스 이름이 없으니 나중에 이미지 출력할 때 쓸 변수 저장
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
train_images.shape

#0~9의 정수만 들어가 있음
train_labels

#이미지 만개, 28*28픽셀
test_images.shape
len(test_labels)

#데이터 전처리
plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

#0~1사이 값으로 만들어 훈련&테스트 세트 처리
train_images = train_images / 255.0
test_images = test_images / 255.0

#일단 첫 25개의 이미지와 클래스이름 출력. 데이터 포멧이 올바른 지 확인용.
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

#신경망의 기본 빌딩인 레이어. 공급된 데이터에서 표현을 추출한다. 훈련 중 가중치 학습
#28*28이미지 픽셀을 784픽셀의 1차원 배열로 변환
#128개의 뉴런(노드)을 가지는 dense층과 
#10개 노드를 갖는 두번째(마지막) 층인 softmax층: 10개의 확률 뱉. 총합1.
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10)
])

#모델컴파일: 손실함수-정확도측정 및 모델 방향 조정, 
#옵티마이저-data와 손실함수 기반 모델 업데이트 방식, 
#메트릭- 훈련 및 테스트 단계 모니터링(여기서는 정확도 사용)
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
              
 
#모델훈련: train셋 배열을 모델에 주입->이미지와 레이블 매핑->test image에 예측->test image와 test label 비교
#모델을 훈련에 맞추어라(fit)
model.fit(train_images, train_labels, epochs=10)

#정확도 평가
#테스트 셋은 훈련 셋보다 정확도가 조금 낮음(과대적합 overfitting)
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print('\nTest accuracy:', test_acc)

#예측하기
probability_model = tf.keras.Sequential([model, 
                                         tf.keras.layers.Softmax()])
predictions = probability_model.predict(test_images)
#테스트 세트의 각 이미지 레이블 예측 중 첫번쨰
predictions[0]
#그 중 가장 신뢰도가 높은 레이블(9=ankle boot)
np.argmax(predictions[0])
#진짜?(9=그러네)
test_labels[0]

#10개 클래스 모두 예측해 그래프로 표현
def plot_image(i, predictions_array, true_label, img):
  true_label, img = true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  true_label = true_label[i]
  plt.grid(False)
  plt.xticks(range(10))
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

#예측확인: 0번째 원소의 이미지, 예측, 신뢰도 점수 배열
#예측확인: i=12면 12번쨰 원소 이미지, 예측, 신뢰도점수배열(붉은 건 잘못예측. 신뢰도 점수가 높음에도 잘못 예측 한 경우)
i = 0
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions[i], test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions[i],  test_labels)
plt.show()

#몇개 더 해볼게. 이미지 많아서 로딩 조금 시간 걸리니까 그냥 기다려.
# Plot the first X test images, their predicted labels, and the true labels.
# Color correct predictions in blue and incorrect predictions in red.
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.show()

#훈련된 모델 사용하기: 마지막 모델로 한 이미지에 대한 예측 만들기
# Grab an image from the test dataset.
img = test_images[1]
print(img.shape)

# keras는 한번에 샘플을 묶거나 배치(batch)해 예측을 만드는 데 최적화 되어 있으니 2차원 배열 사용.
img = (np.expand_dims(img,0))
print(img.shape)

#예측만들기(배열)
predictions_single = probability_model.predict(img)
print(predictions_single)

#예측 그래프가져와
plot_value_array(1, predictions_single[0], test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)
plt.show()

#예측가져와(클래스번호내놔)
np.argmax(predictions_single[0])
